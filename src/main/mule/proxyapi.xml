<?xml version="1.0" encoding="UTF-8"?>

<mule xmlns:tls="http://www.mulesoft.org/schema/mule/tls" xmlns:ee="http://www.mulesoft.org/schema/mule/ee/core"
	xmlns:json-logger="http://www.mulesoft.org/schema/mule/json-logger"
	xmlns:http="http://www.mulesoft.org/schema/mule/http" xmlns="http://www.mulesoft.org/schema/mule/core" xmlns:doc="http://www.mulesoft.org/schema/mule/documentation" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:schemaLocation="http://www.mulesoft.org/schema/mule/core http://www.mulesoft.org/schema/mule/core/current/mule.xsd
http://www.mulesoft.org/schema/mule/http http://www.mulesoft.org/schema/mule/http/current/mule-http.xsd
http://www.mulesoft.org/schema/mule/json-logger http://www.mulesoft.org/schema/mule/json-logger/current/mule-json-logger.xsd
http://www.mulesoft.org/schema/mule/ee/core http://www.mulesoft.org/schema/mule/ee/core/current/mule-ee.xsd
http://www.mulesoft.org/schema/mule/tls http://www.mulesoft.org/schema/mule/tls/current/mule-tls.xsd">
	
	<sub-flow name="ng-proxy-api" doc:id="dc6ec052-016c-4a67-aade-2ff4615a21e6" >
		<logger level="INFO" doc:name="Start Log" doc:id="a61237fd-4220-43dd-8ffb-fe7ebe1220d9" message="Start - Sub Flow ng-proxy-api"/>
		<json-logger:logger doc:name="Logger" doc:id="fd809228-7a9a-40ed-ab5f-cf38b30979e1" config-ref="jsonLoggerConfig" message="Start of proxy routing">
			<json-logger:content ><![CDATA[#[import modules::JSONLoggerModule output application/json ---
{
    path: JSONLoggerModule::stringifyNonJSON(vars.pathName) 
}]]]></json-logger:content>
		</json-logger:logger>
		<set-variable value="#[%dw 2.0&#10;output application/json&#10;---&#10;updatedPath:  if (attributes.requestPath contains &quot;v04&quot;) &quot;v1&quot; ++ (attributes.requestPath splitBy('v04')) [1] else if (attributes.requestPath contains &quot;api/v01&quot;) &quot;v1&quot; ++ (attributes.requestPath splitBy('api/v01')) [1] else if (attributes.requestPath contains &quot;api/v1&quot;) &quot;v1&quot; ++ (attributes.requestPath splitBy('api/v1')) [1] else if(attributes.requestPath contains (&quot;/v01&quot;)) &quot;v1&quot; ++ (attributes.requestPath splitBy('v01')) [1] else if ((attributes.requestPath contains (p('http.preferences.apiName'))) or (attributes.requestPath contains (p('http.contacts.apiName')))) attributes.requestPath else &quot;v1&quot; ++ (attributes.requestPath splitBy('v01')) [1]]" doc:name="Set MigratedPath" doc:id="95e3fa4b-f2f1-41af-8a41-347e5bf06dbc" variableName="vMigartedPath"/>
		<choice doc:name="Choice" doc:id="8bd40ae7-9059-4f18-aea9-9ed8ceedc7dd" >
			 <when expression='#[(!isEmpty(vars.pathName[1])) and ((vars.pathName[1] startsWith("/premise")) or (vars.pathName[1] startsWith("/assets")))]'>
			 	<json-logger:logger doc:name="Log Before Premise or Asset API Call" doc:id="a8bdc7d4-6c42-4c0b-905e-1a21218c6755" message="Before Premise call payload" config-ref="jsonLoggerConfig" tracePoint="BEFORE_REQUEST">
					<json-logger:content><![CDATA[#[%dw 2.0
output application/json
---
{
 	(payload: payload) if ((attributes.method == "POST") or (attributes.method == "PUT")),
 	attributes: attributes
}]]]></json-logger:content>
				</json-logger:logger>
				<ee:transform doc:name="ConnectivityDetails for Mule3 or Mule4" doc:id="64493ed3-4d0e-479e-93d5-89bc9b41c9ca">
					<ee:message>
					</ee:message>
					<ee:variables >
						<ee:set-variable variableName="vConnectDetails" ><![CDATA[%dw 2.0
output application/json
---
if ( p('http.premise.mule4migrate') == "true") {
	host: p('http.premise.mule4host'),
	requestPath: vars.vMigartedPath.updatedPath,
	port: p('http.premise.mule4port')
}	else {
	host: p('http.premise.host'),
	requestPath: attributes.requestPath,
	port: p('http.premise.port')
} 
	
]]></ee:set-variable>
					</ee:variables>
				</ee:transform>
				<try doc:name="Try" doc:id="3c356a3c-1563-4e41-86b5-1b1d05e1a4d0" >
					<http:request method="#[attributes.method]" doc:name="Call to Premise API" doc:id="562ad646-682c-4d33-aaf2-820a43e9cadd" path="#[vars.vConnectDetails.requestPath]" config-ref="premise-http-request-config" responseTimeout="120000">
					<http:headers><![CDATA[#[output application/json
---
{
	
	"X-Root-Correlation-Id" : attributes.headers.'X-Root-Correlation-Id' default correlationId,
	"Content-Type" : vars."v_content_type",
	"Source-System" : vars.'Source-System',
	"Target-System" : vars.'Target-System',
}]]]></http:headers>
					<http:uri-params><![CDATA[#[attributes.uriParams]]]></http:uri-params>
					<http:query-params><![CDATA[#[attributes.queryParams]]]></http:query-params>
					<http:response-validator>
						<http:success-status-code-validator values="200,201" />
					</http:response-validator>
				</http:request>
					<set-variable value="#[attributes.statusCode]" doc:name="setStatusCode" doc:id="82c2821b-52d3-4202-b181-6f177e6d55aa" variableName="httpStatus" />
					<error-handler >
						<on-error-continue enableNotifications="true" logException="true" doc:name="On Error Continue" doc:id="f7f1092e-5d5b-4e56-975b-2fb0c11cc887" when='#[!isEmpty(error.muleMessage.payload) and (error.muleMessage.payload."errorType" == "SYSTEM:DATAERROR")]' type="HTTP:INTERNAL_SERVER_ERROR">
							<ee:transform doc:name="Map Data Error Payload Response" doc:id="49576f53-9bf8-4e65-aeba-df2924d972c5" >
								<ee:message >
									<ee:set-payload ><![CDATA[%dw 2.0
output application/json
---
error.muleMessage.payload."errorPayload"]]></ee:set-payload>
								</ee:message>
								<ee:variables >
									<ee:set-variable variableName="httpStatus" ><![CDATA[error.muleMessage.payload.errorCode]]></ee:set-variable>
								</ee:variables>
							</ee:transform>
						</on-error-continue>
					</error-handler>
				</try>
			</when> 
			<when expression='#[(!isEmpty(vars.pathName[1])) and (vars.pathName[1] startsWith("/workOrders"))]'>
				<json-logger:logger doc:name="Log Before Workorders Call" doc:id="b05168b6-14f1-4ac6-a5cf-367178ba02ef"  message="Before  WorkOrders Payload" config-ref="jsonLoggerConfig" tracePoint="BEFORE_REQUEST">
					<json-logger:content ><![CDATA[#[%dw 2.0
output application/json
---
{
 	(payload: payload) if ((attributes.method == "POST") or (attributes.method == "PUT")),
 	attributes: attributes
}]]]></json-logger:content>
				</json-logger:logger> 
				<ee:transform doc:name="ConnectivityDetails for Mule3 or Mule4" doc:id="0e31c790-deae-4f3f-a0ae-16d9ea433491">
					<ee:message>
					</ee:message>
					<ee:variables >
						<ee:set-variable variableName="vConnectDetails" ><![CDATA[%dw 2.0
output application/json
---
if ( p('http.workOrders.mule4migrate') == "true") {
	host: p('http.workOrders.mule4host'),
	requestPath: vars.vMigartedPath.updatedPath,
	port: p('http.workOrders.mule4port')
}	else {
	host: p('http.workOrders.host'),
	requestPath: attributes.requestPath,
	port: p('http.workOrders.port')
} 
	
]]></ee:set-variable>
					</ee:variables>
				</ee:transform>
				<http:request method="#[attributes.method]" doc:name="Call to WorkOrders API" doc:id="0db17a99-9f76-4221-a661-61ed05f9986f" path="#[vars.vConnectDetails.requestPath]" config-ref="workorders-http-request-config" responseTimeout="120000">
					<http:headers ><![CDATA[#[output application/json
---
{
	
	"X-Root-Correlation-Id" : attributes.headers.'X-Root-Correlation-Id' default correlationId,
	"Content-Type" : vars."v_content_type",
	"Source-System" : vars.'Source-System',
	"Target-System" : vars.'Target-System',
}]]]></http:headers>
					<http:uri-params ><![CDATA[#[attributes.uriParams]]]></http:uri-params>
					<http:query-params ><![CDATA[#[attributes.queryParams]]]></http:query-params>
					<http:response-validator >
						<http:success-status-code-validator values="200,201" />
					</http:response-validator>
				</http:request>
				<set-variable value="#[attributes.statusCode default 200]" doc:name="setStatusCode" doc:id="f50bf07a-23e8-471d-80b3-944bf5980b66" variableName="httpStatus"/>
			</when>
			<when expression='#[(!isEmpty(vars.pathName[1])) and (vars.pathName[1] startsWith("/serviceOrders"))]'>
				<json-logger:logger doc:name="Log Before ServiceOrder Call" doc:id="41527380-02ef-4de4-857e-e8034f835cd4" message="before ServiceOrders payload" config-ref="jsonLoggerConfig" tracePoint="BEFORE_REQUEST">
					<json-logger:content ><![CDATA[#[%dw 2.0
output application/json
---
{
 	(payload: payload) if ((attributes.method == "POST") or (attributes.method == "PUT")),
 	attributes: attributes
}]]]></json-logger:content>
				</json-logger:logger>
				<ee:transform doc:name="ConnectivityDetails for Mule3 or Mule4" doc:id="65132564-afe3-4f45-bb5b-fe6c53b6382c">
					<ee:message>
					</ee:message>
					<ee:variables >
						<ee:set-variable variableName="vConnectDetails" ><![CDATA[%dw 2.0
output application/json
---
if ( p('http.serviceOrders.mule4migrate') == "true") {
	host: p('http.serviceOrders.mule4host'),
	requestPath: vars.vMigartedPath.updatedPath,
	port: p('http.serviceOrders.mule4port')
}	else {
	host: p('http.serviceOrders.host'),
	requestPath: attributes.requestPath,
	port: p('http.serviceOrders.port')
} 
	
]]></ee:set-variable>
					</ee:variables>
				</ee:transform>
				<http:request method="#[attributes.method]" doc:name="Call to ServiceOrders API" doc:id="af4e021e-4fdd-4d11-b5bb-0f29273e51de" path="#[vars.vConnectDetails.requestPath]" config-ref="serviceorders-http-request-config" responseTimeout="120000">
					<http:headers ><![CDATA[#[output application/json
---
{
	
	"X-Root-Correlation-Id" : attributes.headers.'X-Root-Correlation-Id' default correlationId,
	"Content-Type" : vars."v_content_type",
	"Source-System" : vars.'Source-System',
	"Target-System" : vars.'Target-System',
}]]]></http:headers>
					<http:uri-params ><![CDATA[#[attributes.uriParams]]]></http:uri-params>
					<http:query-params ><![CDATA[#[attributes.queryParams]]]></http:query-params>
					<http:response-validator >
						<http:success-status-code-validator values="200,201" />
					</http:response-validator>
				</http:request>
				<set-variable value="#[attributes.statusCode]" doc:name="setStatusCode" doc:id="7afb46e8-7190-4167-a64a-f543af9107b0" variableName="httpStatus"/>
			</when>
			<when expression='#[(!isEmpty(vars.pathName[1])) and (vars.pathName[1] startsWith("/customer"))]'>
				<json-logger:logger doc:name="Log Before Customer Call" doc:id="32d2abd1-50b5-4dfd-bfc5-cf2d72806410" message="Before Customers Payload" config-ref="jsonLoggerConfig" tracePoint="BEFORE_REQUEST">
					<json-logger:content ><![CDATA[#[%dw 2.0
output application/json
---
{
 	(payload: payload) if ((attributes.method == "POST") or (attributes.method == "PUT")),
 	attributes: attributes
}]]]></json-logger:content>
				</json-logger:logger>
				<ee:transform doc:name="ConnectivityDetails for Mule3 or Mule4" doc:id="35581a9f-ee87-4417-919e-0651486801b3">
					<ee:message>
					</ee:message>
					<ee:variables >
						<ee:set-variable variableName="vConnectDetails" ><![CDATA[%dw 2.0
output application/json
---
if ( p('http.customer.mule4migrate') == "true") {
	host: p('http.customer.mule4host'),
	requestPath: vars.vMigartedPath.updatedPath,
	port: p('http.customer.mule4port')
}	else {
	host: p('http.customer.host'),
	requestPath: attributes.requestPath,
	port: p('http.customer.port')
} 
	
]]></ee:set-variable>
					</ee:variables>
				</ee:transform>
				<try doc:name="Try" doc:id="a2189daa-6086-4be6-989c-95fc7c64b1b1" >
					<http:request method="#[attributes.method]" doc:name="Call to Customer API" doc:id="767c5b38-b555-4cfe-8bfd-0d74579b8de0" path="#[vars.vConnectDetails.requestPath]" config-ref="customers-http-request-config">
					<http:headers><![CDATA[#[output application/json
---
{
	
	"X-Root-Correlation-Id" : attributes.headers.'X-Root-Correlation-Id' default correlationId,
	"Content-Type" : vars."v_content_type",
	"Source-System" : vars.'Source-System',
	"Target-System" : vars.'Target-System',
}]]]></http:headers>
					<http:uri-params><![CDATA[#[attributes.uriParams]]]></http:uri-params>
					<http:query-params><![CDATA[#[attributes.queryParams]]]></http:query-params>
					<http:response-validator>
						<http:success-status-code-validator values="200,201" />
					</http:response-validator>
				</http:request>
					<set-variable value="#[attributes.statusCode]" doc:name="setStatusCode" doc:id="6ad383d7-bed8-4c3f-ab27-c7da274fa5f6" variableName="httpStatus" />
					<error-handler >
						<on-error-continue enableNotifications="true" logException="true" doc:name="On Error Continue" doc:id="eb7b739e-8b7b-46de-b0fc-358fdadb1a1a" when='#[!isEmpty(error.muleMessage.payload) and (error.muleMessage.payload."errorType" == "SYSTEM:DATAERROR")]' type="HTTP:INTERNAL_SERVER_ERROR">
							<ee:transform doc:name="Map Data Error Payload Response" doc:id="934149fe-d557-48ae-bc4a-44b2ac166f8d" >
								<ee:message >
									<ee:set-payload ><![CDATA[%dw 2.0
output application/json
---
error.muleMessage.payload."errorPayload"]]></ee:set-payload>
								</ee:message>
								<ee:variables >
									<ee:set-variable variableName="httpStatus" ><![CDATA[error.muleMessage.payload.errorCode]]></ee:set-variable>
								</ee:variables>
							</ee:transform>
						</on-error-continue>
					</error-handler>
				</try>
			</when>
			<when expression='#[(!isEmpty(vars.pathName[1])) and (vars.pathName[1] startsWith("/commonCustomers"))]'>
				<json-logger:logger doc:name="Log Before Common Customers Call" doc:id="7b44b8c6-bffc-4df5-b8fb-c1ae0d55ce02" config-ref="jsonLoggerConfig" message="Before Common Customers Payload " tracePoint="BEFORE_REQUEST">
					<json-logger:content ><![CDATA[#[%dw 2.0
output application/json
---
{
 	(payload: payload) if ((attributes.method == "POST") or (attributes.method == "PUT")),
 	attributes: attributes
}]]]></json-logger:content>
				</json-logger:logger>
              <ee:transform doc:name="Update requestPath" doc:id="647fafc0-1a61-435a-8bc8-3f1bb77059ab">
					<ee:message>
					</ee:message>
					<ee:variables >
						<ee:set-variable variableName="requestPathUpdatedVar" ><![CDATA[%dw 2.0
output application/java
---
attributes.requestPath replace "api/v01/commonCustomers" with "api/v1/customers"]]></ee:set-variable>
					</ee:variables>
				</ee:transform>
				<http:request doc:name="Call to: Common Customers Request Calls" doc:id="5d9c4a52-8909-4879-87fa-f1d492be79c0" config-ref="gbe-commoncustomers-http-request-config" method="#[attributes.method]" path="#[vars.requestPathUpdatedVar]">
					<http:headers ><![CDATA[#[output application/java
---
{
"ng_customer_number" : attributes.headers.'ng_customer_number' default null,
"x-client_id" : "06e007c70cd14d66925a330fce5df7be",
"ng_billingaccount_number" : attributes.headers.'ng_billingaccount_number',
"Target-System" : attributes.headers.'Target-System' default "CSS",
"x-client_secret" : "1Cb27727665d40Aa8E44BCf69a2a4b11",
"Accept" : "application/json",
"Source-System" : attributes.headers.'Source-System' default "Salesforce",
"ng_premise_number" : attributes.headers.'ng_premise_number' default null,
"Content-Type" : "application/json",
"X-Root-Correlation-Id" : attributes.headers.'X-Root-Correlation-Id' default correlationId,
}]]]></http:headers>
				</http:request>
				<json-logger:logger doc:name="Log After Common Customers Call" doc:id="9db63457-4220-4c1c-b66d-4fa18f3ea3f8" config-ref="jsonLoggerConfig" message="After Common Customers Payload " tracePoint="AFTER_REQUEST">
					<json-logger:content ><![CDATA[#[%dw 2.0
output application/json
---
{
 	payload: payload,
 	attributes: attributes
}]]]></json-logger:content>
				</json-logger:logger>
				<set-variable value="#[attributes.statusCode]" doc:name="setStatusCode" doc:id="76cb798d-3964-4beb-a124-8cb85b8a73a3" variableName="httpStatus" />
			</when>
			<when expression='#[((!isEmpty(vars.pathName[1])) and (vars.pathName[1] startsWith("/common")))]'>
				<json-logger:logger doc:name="Log Before Common Call" doc:id="a8ae2a75-e89a-4186-a105-4a4057d8bc56" message="Before Premise call payload" config-ref="jsonLoggerConfig" tracePoint="BEFORE_REQUEST">
					<json-logger:content><![CDATA[#[%dw 2.0
output application/json
---
{
 	(payload: payload) if ((attributes.method == "POST") or (attributes.method == "PUT")),
 	attributes: attributes
}]]]></json-logger:content>
				</json-logger:logger>
				<ee:transform doc:name="ConnectivityDetails for Mule3 or Mule4" doc:id="b29e3c3b-30c6-47eb-86c5-30417f586011">
					<ee:message>
					</ee:message>
					<ee:variables >
						<ee:set-variable variableName="vConnectDetails" ><![CDATA[%dw 2.0
output application/json
---
if ( p('http.customer.mule4migrate') == "true") {
	host: p('http.commons.mule4host'),
	requestPath: vars.vMigartedPath.updatedPath,
	port: p('http.commons.mule4port')
}	else {
	host: p('http.commons.host'),
	requestPath: attributes.requestPath,
	port: p('http.commons.port')
} 
	
]]></ee:set-variable>
					</ee:variables>
				</ee:transform>
				<http:request method="#[attributes.method]" doc:name="Call to Common API" doc:id="7d4f6e32-cb22-45fd-8bf9-108016e1e399" path="#[vars.vConnectDetails.requestPath]" config-ref="commons-http-request-config" responseTimeout="120000">
					<http:headers ><![CDATA[#[output application/json
---
{
	
	"X-Root-Correlation-Id" : attributes.headers.'X-Root-Correlation-Id' default correlationId,
	"Content-Type" : vars."v_content_type",
	"Source-System" : vars.'Source-System',
	"Target-System" : vars.'Target-System',
}]]]></http:headers>
					<http:uri-params ><![CDATA[#[attributes.uriParams]]]></http:uri-params>
					<http:query-params ><![CDATA[#[attributes.queryParams]]]></http:query-params>
					<http:response-validator >
						<http:success-status-code-validator values="200,201" />
					</http:response-validator>
				</http:request>
				<set-variable value="#[attributes.statusCode]" doc:name="setStatusCode" doc:id="d917afc4-6c2f-4461-a0be-3b6991b6dcde" variableName="httpStatus"/>
			</when>
			<when expression="#[((!isEmpty(vars.pathName[1])) and (vars.pathName[1] startsWith(&quot;/preferences&quot;)) or (attributes.requestPath contains (p('http.preferences.apiName'))))]">
				<json-logger:logger doc:name="Log Before Preferences Call" doc:id="aa9c396c-c271-4d99-8fc5-38b51803b96e" message="Before Premise call payload" config-ref="jsonLoggerConfig" tracePoint="BEFORE_REQUEST">
					<json-logger:content><![CDATA[#[%dw 2.0
output application/json
---
{
 	(payload: payload) if ((attributes.method == "POST") or (attributes.method == "PUT")),
 	attributes: attributes
}]]]></json-logger:content>
				</json-logger:logger>
				<ee:transform doc:name="ConnectivityDetails for Mule3 or Mule4" doc:id="3e6a401a-9014-4f3d-b465-a74622bf6bfc">
					<ee:message>
					</ee:message>
					<ee:variables >
						<ee:set-variable variableName="vConnectURL" ><![CDATA[%dw 2.0
output application/json
---
if ( p('http.preferences.mule4migrate') == "true") {
	urlInfo: "https://" ++ p('http.preferences.migrate.host') ++":" ++ p('http.preferences.migrate.port') ++  attributes.requestPath
	
}	else {
	urlInfo: "https://" ++ p('http.preferences.host') ++":" ++ p('http.preferences.port') ++  p('http.preferences.baseuri')  ++ attributes.requestPath
} ]]></ee:set-variable>
					</ee:variables>
				</ee:transform>
				<http:request method="#[attributes.method]" doc:name="Call to Preferences API" doc:id="55230fa1-af16-44f8-81bd-432be4c4960e" config-ref="preferences-http-request-config" responseTimeout="120000" url="#[vars.vConnectURL.urlInfo]">
					<http:headers ><![CDATA[#[output application/json
---
{
	
	"X-Root-Correlation-Id" : attributes.headers.'X-Root-Correlation-Id' default correlationId,
	"Content-Type" : vars."v_content_type",
	"client_id" : p('secure::http.preferences.client_id'),
	"client_secret" : p('secure::http.preferences.client_secret'),
	"customerId" : attributes.headers.customerId default "",
	"contactValue"	: attributes.headers.contactValue default "",
	"emailAddress"	: attributes.headers.emailAddress default "",
	"issuingAuthority" : attributes.headers.issuingAuthority default "",
	"billingAccountNumber": attributes.headers.billingAccountNumber default "",
	"regionFuelType": attributes.headers.regionFuelType default "",
	"dataUsePurpose": attributes.headers.dataUsePurpose default ""	
}]]]></http:headers>
					<http:uri-params ><![CDATA[#[attributes.uriParams]]]></http:uri-params>
					<http:query-params ><![CDATA[#[attributes.queryParams]]]></http:query-params>
					<http:response-validator >
						<http:success-status-code-validator values="200,201" />
					</http:response-validator>
				</http:request>
				<set-variable value="#[attributes.statusCode]" doc:name="setStatusCode" doc:id="74725c04-8986-42f5-85f8-50ee88439a2c" variableName="httpStatus"/>
			</when>
			<when expression="#[((!isEmpty(vars.pathName[1])) and (vars.pathName[1] startsWith(&quot;/contacts&quot;)) or (attributes.requestPath contains (p('http.contacts.apiName'))))]">
				<json-logger:logger doc:name="Log Before Contacts Call" doc:id="9a347434-23ef-47af-a79e-38f1da1133f4" message="Before Premise call payload" config-ref="jsonLoggerConfig" tracePoint="BEFORE_REQUEST">
					<json-logger:content><![CDATA[#[%dw 2.0
output application/json
---
{
 	(payload: payload) if ((attributes.method == "POST") or (attributes.method == "PUT")),
 	attributes: attributes
}]]]></json-logger:content>
				</json-logger:logger>
				<ee:transform doc:name="ConnectivityDetails for Mule3 or Mule4" doc:id="ab802924-a10e-429f-8c51-b250a90d777b">
					<ee:message>
					</ee:message>
					<ee:variables >
						<ee:set-variable variableName="vConnectURL" ><![CDATA[%dw 2.0
output application/json
---
if ( p('http.contacts.mule4migrate') == "true") {
	urlInfo: "https://" ++ p('http.contacts.migrate.host') ++":" ++ p('http.contacts.migrate.port') ++ attributes.requestPath
	
}	else {
	urlInfo: "https://" ++ p('http.contacts.host') ++":" ++ p('http.contacts.port') ++ p('http.contacts.baseuri')  ++ attributes.requestPath
}]]></ee:set-variable>
					</ee:variables>
				</ee:transform>
				<http:request method="#[attributes.method]" doc:name="Call to: Contacts Request Calls" doc:id="2cf7ea44-085f-43d2-b2f6-181df133d5ce" config-ref="contacts-http-request-config" responseTimeout="120000" url="#[vars.vConnectURL.urlInfo]">
					<http:headers ><![CDATA[#[output application/json
---
{
	
	"X-Root-Correlation-Id" : attributes.headers.'X-Root-Correlation-Id' default correlationId,
	"Content-Type" : vars."v_content_type",
	"client_id" : p('secure::http.contacts.client_id'),
	"client_secret" : p('secure::http.contacts.client_secret')
}]]]></http:headers>
					<http:uri-params ><![CDATA[#[attributes.uriParams]]]></http:uri-params>
					<http:query-params ><![CDATA[#[attributes.queryParams]]]></http:query-params>
					<http:response-validator >
						<http:success-status-code-validator values="200,201" />
					</http:response-validator>
				</http:request>
				<set-variable value="#[attributes.statusCode]" doc:name="setStatusCode" doc:id="706303c3-1dc8-4991-b284-01dde9bc3600" variableName="httpStatus"/>
			</when>
		<!-- <when expression='#[vars.pathName[1] startsWith("/crisCustomer")]'>
				<json-logger:logger doc:name="beforeCustomersLogger" doc:id="e7d1bbdc-f8f7-4445-80b7-cb807dde9988" config-ref="jsonLoggerConfig" message="Before Customers Payload" tracePoint="BEFORE_REQUEST">
					<json-logger:content><![CDATA[#[output application/json -&#45;&#45;
{
 	payload: payload,
 	attributes: attributes
}]]]></json-logger:content>
				</json-logger:logger>
				<set-variable value="#[payload]" doc:name="Set Variable" doc:id="0ec71e1c-a029-4d35-b88e-23b6670bbfcc" variableName="sfRequest" />
				<http:request method="#[attributes.method]" doc:name="callHttpwithCustomersDetails" doc:id="0b6e8737-47da-448e-8699-8fd683498bf1" config-ref="http-request-config-getcustomers-details" path="${http.crisCustomer.requestpath}" sendBodyMode="ALWAYS" responseTimeout="120000">
					<http:headers><![CDATA[#[output application/json
-&#45;&#45;
{
	"ng_tid": attributes.headers.'ng_tid',
	"Accept" : "application/json",
	"Content-Type" : "application/json",
	"Source-System" : attributes.headers.'Source-System',
	"Target-System" : attributes.headers.'Target-System',
	"x-client_id": Mule::p('secure::https.request.x-clientid'),
	"x-client_secret": Mule::p('secure::https.request.x-clientsecret')
	
}]]]></http:headers>
					<http:query-params ><![CDATA[#[output application/java
-&#45;&#45;
{
	"ng_crisrefid" : attributes.queryParams.ng_crisrefid,
	"ng_cris_userid" : attributes.queryParams.ng_cris_userid
}]]]></http:query-params>
				</http:request>
				<set-variable value="#[attributes.statusCode]" doc:name="setStatusCode" doc:id="9a521c9b-c10f-4606-9d45-7ffe1001fe57" variableName="vStatusCode" />
			</when>	 -->
			
			<otherwise >
				<json-logger:logger doc:name="DefaultLogger" doc:id="cd56dad5-fb2a-41e4-b3a9-16bef8b33b17" message="DefaultLogger payload" config-ref="jsonLoggerConfig" tracePoint="AFTER_TRANSFORM">
					<json-logger:content ><![CDATA[#[output application/json ---
{
 	payload: payload,
 	attributes: attributes
}]]]></json-logger:content>
				</json-logger:logger>
				<set-variable value="400" doc:name="setStatusCode" doc:id="96b9e2ae-5779-4a12-870e-2f8279459f33" variableName="httpStatus"/>
				<set-payload value='#[%dw 2.0
output application/json
---
{"message" : "Application is not configured in Proxy application. Invalid URI."}]' doc:name="setPayload" doc:id="35508cbc-94ca-40c5-b115-a1282fb517fa" />
			</otherwise>
		</choice>
		<choice doc:name="Choice" doc:id="a5df0a1d-e248-49e4-843a-ccc38349ab8e" >
			<when expression="#[vars.httpStatus &lt; 400]">
				<json-logger:logger doc:name="responseStatusLogger" doc:id="5f5ea996-f906-4911-b4a9-17f386f29f34" config-ref="jsonLoggerConfig" message="Response status payload">
					<json-logger:content ><![CDATA[#[output application/json ---
{
 	payload: payload,
 	attributes: attributes
}]]]></json-logger:content>
				</json-logger:logger>
			</when>
			<when expression="#[vars.httpStatus &gt;= 400]">
				<json-logger:logger doc:name="responseStatusLogger" doc:id="b9d528e8-5f58-4452-bbce-d42be854bcf5" message="Call ServiceOrders Basic Auth" config-ref="jsonLoggerConfig">
					<json-logger:content ><![CDATA[#[output application/json ---
{
 	payload: payload,
 	attributes: attributes
}]]]></json-logger:content>
				</json-logger:logger>
			</when>
			<otherwise >
				<json-logger:logger doc:name="anyResponseStatusLogger" doc:id="6e1182c4-ebf8-498a-a719-a788a656c8af" message="ANY  ERROR " config-ref="jsonLoggerConfig">
					<json-logger:content ><![CDATA[#[output application/json ---
{
 	payload: payload,
 	attributes: attributes
}]]]></json-logger:content>
				</json-logger:logger>
				<ee:transform doc:name="errorResponseInApiTransformMessage" doc:id="604a607f-acfa-49e2-92b9-7a0e306831b1" >
					<ee:message >
						<ee:set-payload ><![CDATA[%dw 2.0
output application/java
---
{
	    "webserviceControllerOutput": { 
	    "severity": "error", 
	   	"code": 500,        
	    "status": "Internal Error",        
	    "details": "Error while connecting to internal/external system or some other internal error occurred. Please contact  API Management team for support"
	    }
	
}]]></ee:set-payload>
					</ee:message>
				</ee:transform>
			</otherwise>
		</choice>
		<json-logger:logger doc:name="END" doc:id="4adc6684-6253-488d-a6d6-42031316d23b" message="NG API Proxy End" config-ref="jsonLoggerConfig" tracePoint="END">
			<json-logger:content ><![CDATA[#[output application/json ---
{
 	payload: payload,
 	attributes: attributes
}]]]></json-logger:content>
		</json-logger:logger>
		<logger level="INFO" doc:name="End Log" doc:id="e720bfaf-e9c8-468f-9df3-10efad3ed931" message="End - Sub Flow ng-proxy-api"/>
	</sub-flow>
	 <!-- <sub-flow name="Set-Api-System-Name-For-Alert-Notifications" doc:id="d12f4a7b-e2cd-4fd4-ab3e-e79e97239ee6" >
		<set-variable value="if(vars.Source-System != null) (&quot;Source-System&quot;) else (attributes.headers.'Source-System' default &quot;Source-System&quot;)]]"vars.Source-System=""") doc:name="Set Variable" doc:id="399b04ab-8558-4d54-a294-393f75136e3a" variableName="v_source_system"/>
		<set-variable value="if(vars.Target-System != null) (&quot;Target-System&quot;) else (attributes.headers.'Target-System' default &quot;Target-System&quot;)]]" doc:name="Set-v_target_system" doc:id="48e1dbfc-d17f-446c-9b58-32782342998c" variableName="v_target_system"/>
		
	</sub-flow> -->
</mule>
