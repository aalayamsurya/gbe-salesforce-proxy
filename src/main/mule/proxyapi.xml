<?xml version="1.0" encoding="UTF-8"?>

<mule xmlns:tls="http://www.mulesoft.org/schema/mule/tls" xmlns:ee="http://www.mulesoft.org/schema/mule/ee/core"
	xmlns:json-logger="http://www.mulesoft.org/schema/mule/json-logger"
	xmlns:http="http://www.mulesoft.org/schema/mule/http" xmlns="http://www.mulesoft.org/schema/mule/core" xmlns:doc="http://www.mulesoft.org/schema/mule/documentation" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:schemaLocation="http://www.mulesoft.org/schema/mule/core http://www.mulesoft.org/schema/mule/core/current/mule.xsd
http://www.mulesoft.org/schema/mule/http http://www.mulesoft.org/schema/mule/http/current/mule-http.xsd
http://www.mulesoft.org/schema/mule/json-logger http://www.mulesoft.org/schema/mule/json-logger/current/mule-json-logger.xsd
http://www.mulesoft.org/schema/mule/ee/core http://www.mulesoft.org/schema/mule/ee/core/current/mule-ee.xsd
http://www.mulesoft.org/schema/mule/tls http://www.mulesoft.org/schema/mule/tls/current/mule-tls.xsd">
	
	<sub-flow name="ng-proxy-api" doc:id="dc6ec052-016c-4a67-aade-2ff4615a21e6" >
		<json-logger:logger doc:name="Logger" doc:id="fd809228-7a9a-40ed-ab5f-cf38b30979e1" config-ref="jsonLoggerConfig" message="Start of proxy routing">
			<json-logger:content ><![CDATA[#[import modules::JSONLoggerModule output application/json ---
{
    path: JSONLoggerModule::stringifyNonJSON(vars.pathName) 
}]]]></json-logger:content>
		</json-logger:logger>
		<choice doc:name="Choice" doc:id="8bd40ae7-9059-4f18-aea9-9ed8ceedc7dd" >
			 <when expression='#[(!isEmpty(vars.pathName[1])) and ((vars.pathName[1] startsWith("/premise")) or (vars.pathName[1] startsWith("/assets")))]'>
			 	<json-logger:logger doc:name="Log Before Premise or Asset API Call" doc:id="a8bdc7d4-6c42-4c0b-905e-1a21218c6755" message="Before Premise call payload" config-ref="jsonLoggerConfig" tracePoint="BEFORE_REQUEST">
					<json-logger:content><![CDATA[#[output application/json ---
{
 	payload: payload,
 	attributes: attributes
}]]]></json-logger:content>
				</json-logger:logger>
				<http:request method="#[attributes.method]" doc:name="Call to Premise API" doc:id="562ad646-682c-4d33-aaf2-820a43e9cadd" path="#[attributes.requestPath]" config-ref="premise-http-request-config">
					<http:headers ><![CDATA[#[output application/json
---
{
	
	"X-Root-Correlation-Id" : attributes.headers.'X-Root-Correlation-Id' default correlationId,
	"Content-Type" : vars."v_content_type",
	"Source-System" : vars.'Source-System',
	"Target-System" : vars.'Target-System',
}]]]></http:headers>
					<http:uri-params ><![CDATA[#[attributes.uriParams]]]></http:uri-params>
					<http:query-params ><![CDATA[#[attributes.queryParams]]]></http:query-params>
					<http:response-validator >
						<http:success-status-code-validator values="0..599" />
					</http:response-validator>
				</http:request>
				<set-variable value="#[attributes.statusCode]" doc:name="setStatusCode" doc:id="82c2821b-52d3-4202-b181-6f177e6d55aa" variableName="vStatusCode"/>
			</when> 
			<when expression='#[(!isEmpty(vars.pathName[1])) and (vars.pathName[1] startsWith("/workOrders"))]'>
				<json-logger:logger doc:name="Log Before Workorders Call" doc:id="b05168b6-14f1-4ac6-a5cf-367178ba02ef"  message="Before  WorkOrders Payload" config-ref="jsonLoggerConfig" tracePoint="BEFORE_REQUEST">
					<json-logger:content ><![CDATA[#[output application/json ---
{
 	payload: payload,
 	attributes: attributes
}]]]></json-logger:content>
				</json-logger:logger> 
				<http:request method="#[attributes.method]" doc:name="Call to WorkOrders API" doc:id="0db17a99-9f76-4221-a661-61ed05f9986f" path="#[attributes.requestPath]" config-ref="workorders-http-request-config">
					<http:headers ><![CDATA[#[output application/json
---
{
	
	"X-Root-Correlation-Id" : attributes.headers.'X-Root-Correlation-Id' default correlationId,
	"Content-Type" : vars."v_content_type",
	"Source-System" : vars.'Source-System',
	"Target-System" : vars.'Target-System',
}]]]></http:headers>
					<http:uri-params ><![CDATA[#[attributes.uriParams]]]></http:uri-params>
					<http:query-params ><![CDATA[#[attributes.queryParams]]]></http:query-params>
				</http:request>
				<set-variable value="#[attributes.statusCode]" doc:name="setStatusCode" doc:id="f50bf07a-23e8-471d-80b3-944bf5980b66" variableName="vStatusCode"/>
			</when>
			<when expression='#[(!isEmpty(vars.pathName[1])) and (vars.pathName[1] startsWith("/serviceOrders"))]'>
				<json-logger:logger doc:name="Log Before ServiceOrder Call" doc:id="41527380-02ef-4de4-857e-e8034f835cd4" message="before ServiceOrders payload" config-ref="jsonLoggerConfig" tracePoint="BEFORE_REQUEST">
					<json-logger:content ><![CDATA[#[output application/json ---
{
 	payload: payload,
 	attributes: attributes
}]]]></json-logger:content>
				</json-logger:logger>
				<http:request method="#[attributes.method]" doc:name="Call to ServiceOrders API" doc:id="af4e021e-4fdd-4d11-b5bb-0f29273e51de" path="#[attributes.requestPath]" config-ref="serviceorders-http-request-config">
					<http:headers ><![CDATA[#[output application/json
---
{
	
	"X-Root-Correlation-Id" : attributes.headers.'X-Root-Correlation-Id' default correlationId,
	"Content-Type" : vars."v_content_type",
	"Source-System" : vars.'Source-System',
	"Target-System" : vars.'Target-System',
}]]]></http:headers>
					<http:uri-params ><![CDATA[#[attributes.uriParams]]]></http:uri-params>
					<http:query-params ><![CDATA[#[attributes.queryParams]]]></http:query-params>
				</http:request>
				<set-variable value="#[attributes.statusCode]" doc:name="setStatusCode" doc:id="7afb46e8-7190-4167-a64a-f543af9107b0" variableName="vStatusCode"/>
			</when>
			<when expression='#[(!isEmpty(vars.pathName[1])) and (vars.pathName[1] startsWith("/customer"))]'>
				<json-logger:logger doc:name="Log Before Customer Call" doc:id="32d2abd1-50b5-4dfd-bfc5-cf2d72806410" message="Before Customers Payload" config-ref="jsonLoggerConfig" tracePoint="BEFORE_REQUEST">
					<json-logger:content ><![CDATA[#[output application/json ---
{
 	payload: payload,
 	attributes: attributes
}]]]></json-logger:content>
				</json-logger:logger>
				<http:request method="#[attributes.method]" doc:name="Call to Customer API" doc:id="767c5b38-b555-4cfe-8bfd-0d74579b8de0" path="#[attributes.requestPath]" config-ref="customers-http-request-config">
					<http:headers ><![CDATA[#[output application/json
---
{
	
	"X-Root-Correlation-Id" : attributes.headers.'X-Root-Correlation-Id' default correlationId,
	"Content-Type" : vars."v_content_type",
	"Source-System" : vars.'Source-System',
	"Target-System" : vars.'Target-System',
}]]]></http:headers>
					<http:uri-params ><![CDATA[#[attributes.uriParams]]]></http:uri-params>
					<http:query-params ><![CDATA[#[attributes.queryParams]]]></http:query-params>
				</http:request>
				<set-variable value="#[attributes.statusCode]" doc:name="setStatusCode" doc:id="6ad383d7-bed8-4c3f-ab27-c7da274fa5f6" variableName="vStatusCode"/>
			</when>
			<when expression='#[(!isEmpty(vars.pathName[1])) and (vars.pathName[1] startsWith("/common"))]'>
				<json-logger:logger doc:name="Log Before Common Call" doc:id="a8ae2a75-e89a-4186-a105-4a4057d8bc56" message="Before Premise call payload" config-ref="jsonLoggerConfig" tracePoint="BEFORE_REQUEST">
					<json-logger:content><![CDATA[#[output application/json ---
{
 	payload: payload,
 	attributes: attributes
}]]]></json-logger:content>
				</json-logger:logger>
				<http:request method="#[attributes.method]" doc:name="Call to Common API" doc:id="7d4f6e32-cb22-45fd-8bf9-108016e1e399" path="#[attributes.requestPath]" config-ref="serviceorders-http-request-config">
					<http:headers ><![CDATA[#[output application/json
---
{
	
	"X-Root-Correlation-Id" : attributes.headers.'X-Root-Correlation-Id' default correlationId,
	"Content-Type" : vars."v_content_type",
	"Source-System" : vars.'Source-System',
	"Target-System" : vars.'Target-System',
}]]]></http:headers>
					<http:uri-params ><![CDATA[#[attributes.uriParams]]]></http:uri-params>
					<http:query-params ><![CDATA[#[attributes.queryParams]]]></http:query-params>
					<http:response-validator >
						<http:success-status-code-validator values="0..599" />
					</http:response-validator>
				</http:request>
				<set-variable value="#[attributes.statusCode]" doc:name="setStatusCode" doc:id="d917afc4-6c2f-4461-a0be-3b6991b6dcde" variableName="vStatusCode"/>
			</when>
			<when expression='#[(!isEmpty(vars.pathName[1])) and (vars.pathName[1] startsWith("/preferences"))]'>
				<json-logger:logger doc:name="Log Before Preferences Call" doc:id="aa9c396c-c271-4d99-8fc5-38b51803b96e" message="Before Premise call payload" config-ref="jsonLoggerConfig" tracePoint="BEFORE_REQUEST">
					<json-logger:content><![CDATA[#[output application/json ---
{
 	payload: payload,
 	attributes: attributes
}]]]></json-logger:content>
				</json-logger:logger>
				<http:request method="#[attributes.method]" doc:name="Call to Preferences API" doc:id="55230fa1-af16-44f8-81bd-432be4c4960e" path="#[attributes.requestPath]" config-ref="preferences-http-request-config">
					<http:headers ><![CDATA[#[output application/json
---
{
	
	"X-Root-Correlation-Id" : attributes.headers.'X-Root-Correlation-Id' default correlationId,
	"Content-Type" : vars."v_content_type",
	"client_id" : p('http.preferences.client_id'),
	"client_secret" : p('secure::http.preferences.client_secret'),
}]]]></http:headers>
					<http:uri-params ><![CDATA[#[attributes.uriParams]]]></http:uri-params>
					<http:query-params ><![CDATA[#[attributes.queryParams]]]></http:query-params>
					<http:response-validator >
						<http:success-status-code-validator values="0..599" />
					</http:response-validator>
				</http:request>
				<set-variable value="#[attributes.statusCode]" doc:name="setStatusCode" doc:id="74725c04-8986-42f5-85f8-50ee88439a2c" variableName="vStatusCode"/>
			</when>
			<when expression='#[(!isEmpty(vars.pathName[1])) and (vars.pathName[1] startsWith("/contacts"))]'>
				<json-logger:logger doc:name="Log Before Contacts Call" doc:id="9a347434-23ef-47af-a79e-38f1da1133f4" message="Before Premise call payload" config-ref="jsonLoggerConfig" tracePoint="BEFORE_REQUEST">
					<json-logger:content><![CDATA[#[output application/json ---
{
 	payload: payload,
 	attributes: attributes
}]]]></json-logger:content>
				</json-logger:logger>
				<http:request method="#[attributes.method]" doc:name="Call to: Contacts Request Calls" doc:id="2cf7ea44-085f-43d2-b2f6-181df133d5ce" path="#[attributes.requestPath]" config-ref="contacts-http-request-config">
					<http:headers ><![CDATA[#[output application/json
---
{
	
	"X-Root-Correlation-Id" : attributes.headers.'X-Root-Correlation-Id' default correlationId,
	"Content-Type" : vars."v_content_type",
	"client_id" : p('http.contacts.client_id'),
	"client_secret" : p('secure::http.contacts.client_secret'),
}]]]></http:headers>
					<http:uri-params ><![CDATA[#[attributes.uriParams]]]></http:uri-params>
					<http:query-params ><![CDATA[#[attributes.queryParams]]]></http:query-params>
					<http:response-validator >
						<http:success-status-code-validator values="0..599" />
					</http:response-validator>
				</http:request>
				<set-variable value="#[attributes.statusCode]" doc:name="setStatusCode" doc:id="706303c3-1dc8-4991-b284-01dde9bc3600" variableName="vStatusCode"/>
			</when>
			<otherwise >
				<json-logger:logger doc:name="DefaultLogger" doc:id="cd56dad5-fb2a-41e4-b3a9-16bef8b33b17" message="DefaultLogger payload" config-ref="jsonLoggerConfig" tracePoint="AFTER_TRANSFORM">
					<json-logger:content ><![CDATA[#[output application/json ---
{
 	payload: payload,
 	attributes: attributes
}]]]></json-logger:content>
				</json-logger:logger>
				<set-variable value="400" doc:name="setStatusCode" doc:id="96b9e2ae-5779-4a12-870e-2f8279459f33" variableName="vStatusCode"/>
				<set-payload value='#[%dw 2.0
output application/json
---
{"message" : "Application is not configured in Proxy application. Invalid URI."}]' doc:name="setPayload" doc:id="35508cbc-94ca-40c5-b115-a1282fb517fa" />
			</otherwise>
		</choice>
		<choice doc:name="Choice" doc:id="a5df0a1d-e248-49e4-843a-ccc38349ab8e" >
			<when expression="#[vars.vStatusCode &lt; 400]">
				<json-logger:logger doc:name="responseStatusLogger" doc:id="5f5ea996-f906-4911-b4a9-17f386f29f34" config-ref="jsonLoggerConfig" message="Response status payload">
					<json-logger:content ><![CDATA[#[output application/json ---
{
 	payload: payload,
 	attributes: attributes
}]]]></json-logger:content>
				</json-logger:logger>
			</when>
			<when expression="#[vars.vStatusCode &gt;= 400]">
				<json-logger:logger doc:name="responseStatusLogger" doc:id="b9d528e8-5f58-4452-bbce-d42be854bcf5" message="Call ServiceOrders Basic Auth" config-ref="jsonLoggerConfig">
					<json-logger:content ><![CDATA[#[output application/json ---
{
 	payload: payload,
 	attributes: attributes
}]]]></json-logger:content>
				</json-logger:logger>
			</when>
			<otherwise >
				<json-logger:logger doc:name="anyResponseStatusLogger" doc:id="6e1182c4-ebf8-498a-a719-a788a656c8af" message="ANY  ERROR " config-ref="jsonLoggerConfig">
					<json-logger:content ><![CDATA[#[output application/json ---
{
 	payload: payload,
 	attributes: attributes
}]]]></json-logger:content>
				</json-logger:logger>
				<ee:transform doc:name="errorResponseInApiTransformMessage" doc:id="604a607f-acfa-49e2-92b9-7a0e306831b1" >
					<ee:message >
						<ee:set-payload ><![CDATA[%dw 2.0
output application/java
---
{
	    "webserviceControllerOutput": { 
	    "severity": "error", 
	   	"code": 500,        
	    "status": "Internal Error",        
	    "details": "Error while connecting to internal/external system or some other internal error occurred. Please contact  API Management team for support"
	    }
	
}]]></ee:set-payload>
					</ee:message>
				</ee:transform>
			</otherwise>
		</choice>
		<json-logger:logger doc:name="END" doc:id="4adc6684-6253-488d-a6d6-42031316d23b" message="NG API Proxy End" config-ref="jsonLoggerConfig" tracePoint="END">
			<json-logger:content ><![CDATA[#[output application/json ---
{
 	payload: payload,
 	attributes: attributes
}]]]></json-logger:content>
		</json-logger:logger>
	</sub-flow>
	 <!-- <sub-flow name="Set-Api-System-Name-For-Alert-Notifications" doc:id="d12f4a7b-e2cd-4fd4-ab3e-e79e97239ee6" >
		<set-variable value="if(vars.Source-System != null) (&quot;Source-System&quot;) else (attributes.headers.'Source-System' default &quot;Source-System&quot;)]]"vars.Source-System=""") doc:name="Set Variable" doc:id="399b04ab-8558-4d54-a294-393f75136e3a" variableName="v_source_system"/>
		<set-variable value="if(vars.Target-System != null) (&quot;Target-System&quot;) else (attributes.headers.'Target-System' default &quot;Target-System&quot;)]]" doc:name="Set-v_target_system" doc:id="48e1dbfc-d17f-446c-9b58-32782342998c" variableName="v_target_system"/>
		
	</sub-flow> -->
</mule>
